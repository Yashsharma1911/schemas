openapi: 3.0.0
info:
  title: Meshery Cloud
  description: Documentation for Meshery Remote Provider REST APIs
  contact:
    email: support@layer5.io
  version: latest
tags:
  - name: applications
    description: APIs for applications
    x-displayName: applications
  - name: capabilities
    description: APIs for remote provider capablities
    x-displayName: capabilities
  - name: catalog
    description: APIs for catalog
    x-displayName: catalog
  - name: collaboration
    description: APIs for collaboration
    x-displayName: collaboration
  - name: integrations
    description: APIs for integrations
    x-displayName: integrations
  - name: credentials
    description: APIs for Credentials
    x-displayName: credentials
  - name: events
    description: APIs for events
    x-displayName: events
  - name: filters
    description: APIs for filters
    x-displayName: filters
  - name: meshery_models
    description: APIs for Meshery models
    x-displayName: meshery_models
  - name: patterns
    description: APIs for patterns
    x-displayName: patterns
  - name: smp_profile
    description: APIs for Service Mesh Performace profile
    x-displayName: smp_profile
  - name: service mesh performance
    x-displayName: service mesh performance
  - name: tokens
    description: APIs for tokens
    x-displayName: tokens
  - name: user tokens
    x-displayName: user tokens
  - name: user_onboarding
    description: APIs for user onboarding
    x-displayName: user_onboarding
  - name: user onboarding
    x-displayName: user onboarding
  - name: users
    description: APIs for users
    x-displayName: users
x-tagGroups:
  - name: applications
    tags:
      - applications
    description: Documentation for meshery Cloud REST APIs
  - name: capabilities
    tags:
      - capabilities
    description: Documentation for meshery Cloud REST APIs
  - name: catalog
    tags:
      - catalog
    description: Documentation for meshery Cloud REST APIs
  - name: collaboration
    tags:
      - collaboration
    description: Documentation for meshery Cloud REST APIs
  - name: connections
    tags:
      - integrations
    description: Documentation for meshery Cloud REST APIs
  - name: credentials
    tags:
      - credentials
    description: Documentation for meshery Cloud REST APIs
  - name: events
    tags:
      - events
    description: Documentation for meshery Cloud REST APIs
  - name: filters
    tags:
      - filters
    description: Documentation for meshery Cloud REST APIs
  - name: meshmodels
    tags:
      - meshery_models
    description: Documentation for meshery Cloud REST APIs
  - name: patterns
    tags:
      - patterns
    description: Documentation for meshery Cloud REST APIs
  - name: smp_profile
    tags:
      - smp_profile
      - service mesh performance
    description: Documentation for meshery Cloud REST APIs
  - name: tokens
    tags:
      - tokens
      - user tokens
    description: Documentation for meshery Cloud REST APIs
  - name: user_onboarding
    tags:
      - user_onboarding
      - user onboarding
    description: Documentation for meshery Cloud REST APIs
  - name: users
    tags:
      - users
    description: Documentation for meshery Cloud REST APIs
servers:
  - url: https://meshery.layer5.io
    description: Meshery Cloud production server URL
  - url: https://staging-meshery.layer5.io
    description: Meshery Cloud staging server URL
  - url: http://localhost:9876
    description: >-
      Meshery Cloud development server URL (controlled via PORT environment
      variable)
paths:
  /api/content/applications:
    post:
      tags:
        - applications
      operationId: UpsertApplication
      summary: Upsert Application
      description: >-
        It will insert the application if not present else it will update the
        matching entry
      requestBody:
        $ref: '#/components/requestBodies/mesheryApplicationRequestBody'
      responses:
        '200':
          description: Upserted application
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/mesheryApplication'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    get:
      tags:
        - applications
      operationId: GetApplications
      summary: Get Applications
      description: Get paginated applications
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Applications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryApplicationPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/applications/upload/{id}:
    post:
      tags:
        - applications
      operationId: UpsertApplicationSourceContent
      summary: Upsert application source content
      description: Upserts only application source content
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: Body for upserting meshery application source content
        required: true
        content:
          text/plain:
            schema:
              $ref: >-
                #/components/schemas/mesheryApplication/properties/source_content
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/applications/download/{id}:
    get:
      tags:
        - applications
      operationId: GetApplicationSourceContent
      summary: Get application source content
      description: Get application source content
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: application source content associated with ID
          content:
            text/plain:
              schema:
                $ref: >-
                  #/components/schemas/mesheryApplication/properties/source_content
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/applications/{id}:
    get:
      tags:
        - applications
      operationId: GetApplication
      summary: Get application by ID
      description: Get application by ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: application associated with ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryApplication'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    delete:
      tags:
        - applications
      operationId: DeleteApplication
      summary: Delete application by ID
      description: Delete application associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Deleted application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryApplication'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /capabilities:
    get:
      deprecated: true
      tags:
        - capabilities
      operationId: GetCapabilitie
      summary: Capabilities
      description: Get available capabilities for logged in user
      parameters:
        - $ref: '#/components/parameters/os'
        - $ref: '#/components/parameters/playground'
      responses:
        '200':
          description: capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/capability'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /{meshery-version}/capabilities:
    get:
      tags:
        - capabilities
      operationId: GetCapabilities
      summary: Capabilities By server version
      description: Get available capabilities for logged in user
      parameters:
        - $ref: '#/components/parameters/mesheryVersion'
        - $ref: '#/components/parameters/os'
        - $ref: '#/components/parameters/playground'
      responses:
        '200':
          description: capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/capability'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/catalog/requests/approve:
    post:
      tags:
        - catalog
      operationId: ApproveCatalogRequest
      summary: Approve Catalog Request
      description: Approve Catalog Request
      requestBody:
        $ref: '#/components/requestBodies/mesheryCatalogRequest'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '401':
          $ref: '#/components/responses/401'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/catalog/requests/deny:
    post:
      tags:
        - catalog
      operationId: DenyCatalogRequest
      summary: Deny Catalog Request
      description: Deny Catalog Request
      requestBody:
        $ref: '#/components/requestBodies/mesheryCatalogRequest'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '401':
          $ref: '#/components/responses/401'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/catalog/requests:
    get:
      tags:
        - catalog
      operationId: GetCatalogRequest
      summary: Catalog Request
      description: >-
        Get all catalog requests (approved, denied or pending) in a paginated
        manner
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/requestFilter'
      responses:
        '200':
          description: Catalog requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalogRequestsPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/catalog/content/{type}:
    get:
      tags:
        - catalog
      operationId: GetCatalogContent
      summary: Get Catalog Content
      description: Get catalog content by type
      parameters:
        - $ref: '#/components/parameters/catalogContentType'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: catalog content
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      page:
                        type: integer
                      page_size:
                        type: integer
                      total_count:
                        type: integer
                      patterns:
                        type: array
                        items:
                          $ref: '#/components/schemas/mesheryPattern'
                  - type: object
                    properties:
                      page:
                        type: integer
                      page_size:
                        type: integer
                      total_count:
                        type: integer
                      filters:
                        type: array
                        items:
                          $ref: '#/components/schemas/mesheryFilter'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    post:
      tags:
        - catalog
      operationId: PublishCatalogContent
      summary: Publish Catalog Content
      description: >-
        Sets the visibility of catalog content to published and sets CatalogData
        (if called by ADMIN or CURATOR), otherwise it pushes the request to
        CatalogRequests Table
      parameters:
        - $ref: '#/components/parameters/catalogContentType'
      requestBody:
        $ref: '#/components/requestBodies/mesheryCatalogRequest'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    delete:
      tags:
        - catalog
      operationId: UnPublishCatalogContent
      summary: Unpublish Catalog Content
      description: >-
        Sets the visibility of catalog content to private and removes the
        content from website (if called by ADMIN or CURATOR), otherwise rejects
        the request
      parameters:
        - $ref: '#/components/parameters/catalogContentType'
      requestBody:
        $ref: '#/components/requestBodies/mesheryCatalogRequest'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /collaboration:
    get:
      tags:
        - collaboration
      operationId: CollaborationHandler
      summary: Collaboration
      description: Collaboration
      security: []
      responses:
        '101':
          description: initate cross server collaboration
  /api/integrations/connections:
    post:
      tags:
        - integrations
      operationId: RegisterConnection
      summary: Register Connection
      description: Register with Meshery Cloud
      requestBody:
        $ref: '#/components/requestBodies/connectionPayload'
      responses:
        '200':
          description: Inserted connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    get:
      tags:
        - integrations
      operationId: GetConnections
      summary: Get connections
      description: Get connections
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Paginated list of connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionPage'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/integrations/connections/{connectionId}:
    put:
      tags:
        - integrations
      operationId: EditConnectionByID
      summary: Edit Connection by ID
      description: Edit registered connection using the connection ID
      parameters:
        - $ref: '#/components/parameters/connectionId'
      requestBody:
        $ref: '#/components/requestBodies/connectionPayload'
      responses:
        '200':
          description: Edited connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/integrations/connections/status:
    get:
      tags:
        - integrations
      operationId: GetConnectionStatus
      summary: Get status of all connections
      description: Get summary about the status of all connections
      responses:
        '200':
          description: Status of connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionsStatusPage'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/integrations/connections/{connectionKind}:
    get:
      tags:
        - integrations
      operationId: GetConnectionsByKind
      summary: Get connections by kind
      description: Get connections by kind
      parameters:
        - $ref: '#/components/parameters/connectionKind'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Connections by kind
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/500'
      security: []
    delete:
      tags:
        - integrations
      operationId: DeleteConnection
      summary: Delete connection
      description: Delete registered connection
      parameters:
        - $ref: '#/components/parameters/connectionKind'
      responses:
        '200':
          description: Deleted connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/integrations/connections/{connectionKind}/{connectionId}:
    get:
      tags:
        - integrations
      operationId: GetConnectionsByKindAndConnectionID
      summary: Get connections by kind and connectionID.
      description: >-
        Get connections by kind (kind is required because this API returns the
        results in non std format of a connection)
      parameters:
        - $ref: '#/components/parameters/connectionKind'
        - $ref: '#/components/parameters/connectionId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Connections by kind
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/k8sContextPersistResponse'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/integrations/connections/meshery/{mesheryServerID}:
    delete:
      tags:
        - integrations
      operationId: DeleteMesheryConnection
      summary: Delete Meshery connection
      description: >-
        Deletes a given meshery connection. This is generally used for deleting
        connections from Meshery Server UI where UI is not aware of connection
        IDs.
      parameters:
        - $ref: '#/components/parameters/serverId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/system/user/credentials:
    get:
      tags:
        - credentials
      operationId: GetUserCredentials
      summary: Get user's credentials
      description: Get all user's credentials for logged in user
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentialsPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    delete:
      tags:
        - credentials
      operationId: DeleteUserCredential
      summary: Delete user's credentials
      description: Delete user's credentials (tombstoned records) for logged in user
      parameters:
        - $ref: '#/components/parameters/credentialId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    post:
      tags:
        - credentials
      operationId: SaveUserCredential
      summary: Create Credential
      description: Create new credentials for logged in user
      requestBody:
        $ref: '#/components/requestBodies/credentialBody'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    put:
      tags:
        - credentials
      operationId: UpdateUserCredential
      summary: Update credential
      description: Update credentials for logged in user
      requestBody:
        $ref: '#/components/requestBodies/credentialBody'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/events:
    get:
      tags:
        - events
      operationId: GetEventsAggregate
      summary: Get Events Aggregate
      description: Get Events Aggreate Count
      parameters:
        - $ref: '#/components/parameters/cumulative'
      responses:
        '200':
          description: Events Aggregate Count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventsAggregate'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/events/date:
    get:
      tags:
        - events
      operationId: RetrieveResultsByDate
      summary: Events by Date
      description: Get Events by date
      parameters:
        - $ref: '#/components/parameters/cumulative'
      responses:
        '200':
          description: Events by date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventTrackerGroupedArray'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/events/week:
    get:
      tags:
        - events
      operationId: RetrieveResultsByWeek
      summary: Events by Week
      description: Get Events by week
      parameters:
        - $ref: '#/components/parameters/cumulative'
      responses:
        '200':
          description: Events by week
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventTrackerGroupedArray'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/events/month:
    get:
      tags:
        - events
      operationId: RetrieveResultsByMonth
      summary: Events by Month
      description: Get Events by month
      parameters:
        - $ref: '#/components/parameters/cumulative'
      responses:
        '200':
          description: Events by month
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventTrackerGroupedArray'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/events/list:
    get:
      tags:
        - events
      operationId: GetEvents
      summary: All Events
      description: Get All events
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/eventsFilter'
      responses:
        '200':
          description: Events list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventsPage'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/events/summary:
    get:
      tags:
        - events
      operationId: GetEventSummaryByUser
      summary: Events Summary
      description: Get Events summary for a user
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Events Summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventSummaryPage'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/filters:
    post:
      tags:
        - filters
      operationId: UpsertFilter
      summary: Upsert Filter
      description: >-
        It will insert the filter if not present else it will update the
        matching entry
      requestBody:
        $ref: '#/components/requestBodies/mesheryFilterRequestBody'
      responses:
        '200':
          description: Upserted filter
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/mesheryFilter'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    get:
      tags:
        - filters
      operationId: GetFilters
      summary: Get Filters
      description: Get paginated filters
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryFilterPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/filters/file/{id}:
    get:
      tags:
        - filters
      operationId: GetFilterFile
      summary: Filter file
      description: Get the filter associated with the given filter id without any metadata
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Filter file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryFilter/properties/filter_file'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/filters/{id}:
    get:
      tags:
        - filters
      operationId: GetFilter
      summary: Get filter by ID
      description: Get filter by ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Filter associated with ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryFilter'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    delete:
      tags:
        - filters
      operationId: DeleteFilter
      summary: Delete filter by ID
      description: Delete filter associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Deleted filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryFilter'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/filters/clone/{id}:
    post:
      tags:
        - filters
      operationId: CloneFilter
      summary: Clone filter
      description: Clone filter associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: Body for cloning design
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/integrations/meshmodels/models:
    get:
      tags:
        - meshery_models
      operationId: GetMeshModelModels
      summary: Get MeshModel models
      description: Get MeshModel models
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: MeshModel Model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meshmodelModelsPage'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/integrations/meshmodels/categories:
    get:
      tags:
        - meshery_models
      operationId: GetMeshModelCategories
      summary: Get MeshModel categories
      description: Get MeshModel categories
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: MeshModel Categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meshmodelCategoriesPage'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/content/patterns/resource:
    post:
      tags:
        - patterns
      operationId: UpsertPatternResource
      summary: Upsert Pattern resource
      description: >-
        It will insert the pattern resource if not present else it will update
        the matching entry
      requestBody:
        $ref: '#/components/requestBodies/mesheryPatternResource'
      responses:
        '200':
          description: Meshery pattern resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPatternResource'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    get:
      tags:
        - patterns
      operationId: GetPatternResources
      summary: Get Pattern resources
      description: Get paginated pattern resources
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/oamType'
        - $ref: '#/components/parameters/name'
          description: Name
      responses:
        '200':
          description: Meshery pattern resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPatternResourcePage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/patterns/resource/{id}:
    get:
      tags:
        - patterns
      operationId: GetPatternResource
      summary: Pattern Resource by ID
      description: Get Pattern Resource By ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Meshery pattern resource associated with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPatternResource'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    delete:
      tags:
        - patterns
      operationId: DeletePatternResource
      summary: Delete pattern resource
      description: Delete pattern resource associated with id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Deleted meshery pattern resource associated with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPatternResource'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/patterns:
    post:
      tags:
        - patterns
      operationId: UpsertPattern
      summary: Upsert Pattern
      description: >-
        It will insert the pattern if not present else it will update the
        matching entry
      requestBody:
        $ref: '#/components/requestBodies/mesheryPatternRequestBody'
      responses:
        '200':
          description: Upserted pattern
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/mesheryPattern'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    get:
      tags:
        - patterns
      operationId: GetPatterns
      summary: Get Patterns
      description: Get paginated patterns
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Patterns
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPatternPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    delete:
      tags:
        - patterns
      operationId: DeletePatterns
      summary: Delete patterns
      description: Delete patterns with the provided ids
      requestBody:
        $ref: '#/components/requestBodies/mesheryPatternDeleteRequestBody'
      responses:
        '200':
          description: Deleted pattern
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPattern'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/patterns/{id}:
    get:
      tags:
        - patterns
      operationId: GetPattern
      summary: Get pattern by ID
      description: Get pattern by ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Pattern associated with ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPattern'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    delete:
      tags:
        - patterns
      operationId: DeletePattern
      summary: Delete pattern by ID
      description: Delete pattern associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Deleted pattern
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPattern'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/patterns/clone/{id}:
    post:
      tags:
        - patterns
      operationId: ClonePattern
      summary: Clone pattern
      description: Clone pattern associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: Body for cloning design
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/content/design/share:
    post:
      tags:
        - patterns
      operationId: HandleShare
      summary: Design Share
      description: Share design with others
      requestBody:
        $ref: '#/components/requestBodies/designShare'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: Only owner have access to changing sharing mode
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/performance/smp/profiles:
    get:
      tags:
        - service mesh performance
      operationId: SMPDashboardPerfProfiles
      summary: Performance Profiles
      description: Get Performance Profiles for SMP Dashboard
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Get Performance Profiles with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceProfilePage'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/performance/smp/profiles/{id}/results:
    get:
      tags:
        - service mesh performance
      operationId: SMPDashboardTestResults
      summary: Performance Profiles Results by ID
      description: Get Performance Profiles results by ID for SMP Dashboard
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Get Performance Profiles Results with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryResultPage'
        '500':
          $ref: '#/components/responses/500'
        '502':
          description: Invalid path parameter "id"
          content:
            text/plain:
              schema:
                type: string
      security: []
  /api/performance/profiles:
    post:
      tags:
        - service mesh performance
      operationId: UpsertPerformanceProfile
      summary: Upsert Performance Profiles
      description: >-
        Update performance profiles or create a new performance profile if no id
        is provided
      requestBody:
        description: Body for upserting performance profile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/performanceProfile'
      responses:
        '201':
          description: updated performance profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceProfile'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    get:
      tags:
        - service mesh performance
      operationId: GetPerformanceProfiles
      summary: Get Performance Profiles
      description: Get performance profiles
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Performance Profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceProfilePage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/performance/profiles/{id}:
    get:
      tags:
        - service mesh performance
      operationId: GetPerformanceProfile
      summary: Performance Profile by Id
      description: Get Performance Profile by ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Performance Profile for provided performance profile id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceProfile'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    delete:
      tags:
        - service mesh performance
      operationId: DeletePerformanceProfile
      summary: Delete Performance Profiles
      description: Delete performance profiles by ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Deleted Performance Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceProfile'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/performance/profiles/{id}/results:
    get:
      tags:
        - service mesh performance
      operationId: GetPerformanceProfileResults
      summary: Performance Profiles result
      description: Get paginated Performance Profiles result
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Performance Profile results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryResultPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    post:
      tags:
        - service mesh performance
      operationId: AddPerformanceProfileResult
      summary: Add performance profiles result
      description: Add performance profile result in given performance profile id
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: Body for adding perfor mance profile result
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/performanceResult'
      responses:
        '201':
          description: Performance Profile results
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                    format: uuid
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/performance/profiles/{id}/results/{resultID}:
    get:
      tags:
        - service mesh performance
      operationId: GetPerformanceProfileResult
      summary: Performance Profiles result
      description: >-
        Get the performance test result associated with the given profile id and
        with the given test id
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/resultID'
      responses:
        '200':
          description: Performance Profile results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceResult'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /system/user/tokens:
    get:
      tags:
        - user tokens
      operationId: GetUserTokens
      summary: Get Tokens
      description: Get tokens associated with logged in user
      parameters:
        - $ref: '#/components/parameters/isOAuth'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: user tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    post:
      tags:
        - user tokens
      operationId: GenerateToken
      summary: Generate token for logged in user
      description: >-
        Generates infinite token (i.e. tokens that do not expire) for the logged
        in user.
      parameters:
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/purpose'
      responses:
        '200':
          description: generated token
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    delete:
      tags:
        - user tokens
      operationId: DeleteUserTokens
      summary: Delete token
      description: Delete token for logged in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/map_object'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /system/token:
    get:
      tags:
        - user tokens
      operationId: IssueIndefiniteLifetimeToken
      summary: Infinite token
      description: Get Infinite Token
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/provider'
      responses:
        '200':
          description: generated token
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/request:
    post:
      tags:
        - user onboarding
      operationId: SignupRequest
      summary: Sign up request
      description: Updates user singup request
      requestBody:
        $ref: '#/components/requestBodies/signupData'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    get:
      tags:
        - user onboarding
      operationId: GetSignupRequests
      summary: Get all Signup requests
      description: Get all Signup requests
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/requestFilter'
      responses:
        '200':
          description: Signup request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signupRequestsPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/request/approve:
    post:
      tags:
        - user onboarding
      operationId: ApproveSignupRequest
      summary: Approve Signup request
      description: Approve Signup request
      parameters:
        - name: id
          in: query
          description: Signup request id
          schema:
            $ref: '#/components/schemas/id'
        - name: first_name
          in: query
          description: First Name
          schema:
            type: string
        - name: last_name
          in: query
          description: Last Name
          schema:
            type: string
        - name: occupation
          in: query
          description: Email
          schema:
            $ref: '#/components/schemas/email'
        - name: organization
          in: query
          description: Organization
          schema:
            type: string
        - name: role
          in: query
          description: Role in organization
          schema:
            type: string
        - name: form_type
          in: query
          description: Form Type (MeshMap or Playground)
          schema:
            type: string
        - name: status
          in: query
          description: Status (approved / denied)
          schema:
            type: string
        - name: task_id
          in: query
          description: Click up task id
          schema:
            type: string
        - name: task_link
          in: query
          description: Click up task link
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/request/deny:
    post:
      tags:
        - user onboarding
      operationId: DenySignupRequest
      summary: Deny signup request
      description: Deny Signup Request
      parameters:
        - name: id
          in: query
          description: Signup request id
          schema:
            $ref: '#/components/schemas/id'
        - name: first_name
          in: query
          description: First Name
          schema:
            type: string
        - name: last_name
          in: query
          description: Last Name
          schema:
            type: string
        - name: occupation
          in: query
          description: Email
          schema:
            $ref: '#/components/schemas/email'
        - name: organization
          in: query
          description: Organization
          schema:
            type: string
        - name: role
          in: query
          description: Role in organization
          schema:
            type: string
        - name: form_type
          in: query
          description: Form Type (MeshMap or Playground)
          schema:
            type: string
        - name: status
          in: query
          description: Status (approved / denied)
          schema:
            type: string
        - name: task_id
          in: query
          description: Click up task id
          schema:
            type: string
        - name: task_link
          in: query
          description: Click up task link
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/request/approve/{id}:
    get:
      tags:
        - user onboarding
      operationId: ApproveSignupRequestByID
      summary: Approve signup request by ID
      description: Approve signup request associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '302':
          description: 'Redirect: SERVER_BASE_URL/profile/roles'
        '303':
          description: 'Redirect: SERVER_BASE_URL/?source=<base64 encoded source url>'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/request/deny/{id}:
    get:
      tags:
        - user onboarding
      operationId: DenySignupRequestByID
      summary: Deny signup request by ID
      description: Deny signup request associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '302':
          description: 'Redirect: SERVER_BASE_URL/profile/roles'
        '303':
          description: 'Redirect: SERVER_BASE_URL/?source=<base64 encoded source url>'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/request/notification:
    get:
      tags:
        - user onboarding
      operationId: GetSignupRequestNotification
      summary: Signup request notification
      description: Signup request notification
      responses:
        '200':
          description: Signup request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signupData'
        '204':
          description: Status no content
        '401':
          $ref: '#/components/responses/401'
      security:
        - jwt: []
  /api/identity/users/invite:
    post:
      tags:
        - users
      operationId: HandleUserInvite
      summary: User Invite
      description: Send invitation request to users
      requestBody:
        $ref: '#/components/requestBodies/userInvite'
      responses:
        '200':
          $ref: '#/components/responses/200'
          description: Invitation sent
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/preferences:
    put:
      tags:
        - users
      operationId: UpdateUserPreference
      summary: User Preference
      description: Upsert user preferences
      requestBody:
        description: Body for upserting user preferences
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/map_object'
      responses:
        '201':
          $ref: '#/components/responses/201'
          description: Preferences updated
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/keys:
    get:
      tags:
        - users
      operationId: GetUserKeys
      summary: Get User Keys
      description: Get all keys based on roles assigned to user
      responses:
        '200':
          description: Returns user keys based on roles assigned to user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userKeys'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/user/{user_id}:
    get:
      tags:
        - users
      operationId: GetUserById
      summary: Get User by ID
      description: Get specific user by user id
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Returns user with given user_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/{delete_on}:
    post:
      tags:
        - users
      operationId: DeleteUsers
      summary: Delete users
      description: Delete users based on delete_for parameter
      parameters:
        - $ref: '#/components/parameters/deleteOn'
      requestBody:
        $ref: '#/components/requestBodies/deleteUsers'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/system/delete/user/{user_id}:
    get:
      tags:
        - users
      operationId: DeleteUserAccountById
      summary: Delete account by ID
      description: Delete account by ID
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users:
    get:
      tags:
        - users
      operationId: GetRoleHolders
      summary: Get All users
      description: Get All users
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: Get all user with pagination
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/usersPageForAdmin'
                  - $ref: '#/components/schemas/teamMembersPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/users:
    get:
      tags:
        - users
      operationId: GetUsers
      summary: Get All users
      description: Get All users
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: Get all user with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersPageForNonAdmin'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/profile/{id}:
    get:
      tags:
        - users
      operationId: GetUserProfileById
      summary: Get user profile by Id
      description: Get user profile of given user Id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Returns user with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/profile:
    get:
      tags:
        - users
      operationId: GetUser
      summary: Get User details
      description: Get user details for logged in user
      responses:
        '200':
          description: user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    put:
      tags:
        - users
      operationId: UpdateProfile
      summary: Update Profile
      description: Update user profile data (also updates kratos identity)
      requestBody:
        $ref: '#/components/requestBodies/user'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/profile/details:
    get:
      tags:
        - users
      operationId: GetProfileOverview
      summary: Profile Overview
      description: Get Profile overview for logged in user
      responses:
        '200':
          description: user account overview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountOverview'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/users/{user_id}/profile/activity:
    get:
      tags:
        - users
      operationId: GetUserActivity
      summary: User Activity
      description: Get last 10 user activities
      parameters:
        - name: user_id
          in: path
          description: UUID of User
          schema:
            type: string
          required: true
      responses:
        '200':
          description: user activity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recentActivityPage'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/identity/users/online:
    get:
      tags:
        - users
      operationId: GetRecentlyOnlineUsers
      summary: Online users
      description: Get info of active / online users in last 24 hours
      responses:
        '200':
          description: active users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recentUsers'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/identity/badges:
    get:
      tags:
        - users
      operationId: GetAvailableBadges
      summary: Gets available badges
      description: Gets available badges
      responses:
        '200':
          description: Badges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badges'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
components:
  securitySchemes:
    jwt:
      type: http
      scheme: Bearer
      bearerFormat: JWT
  schemas:
    mesheryApplication:
      properties:
        id:
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/id'
        application_file:
          $ref: '#/components/schemas/text'
          description: Application file
        name:
          $ref: '#/components/schemas/text'
          description: Pattern Name
        location:
          $ref: '#/components/schemas/map_object'
        visibility:
          $ref: '#/components/schemas/text'
        source_type:
          enum:
            - k8s_manifest
            - docker_compose
            - helm_chart
          description: Source type (K8s manifest, Helm chart, Docker compose)
        source_content:
          type: string
          format: byte
          description: Source content
        catalog_data:
          $ref: '#/components/schemas/map_object'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
    mesheryApplicationPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            applications:
              type: array
              items:
                $ref: '#/components/schemas/mesheryApplication'
    resultsPage:
      discriminator:
        propertyName: resultType
      properties:
        page:
          type: integer
        page_size:
          type: integer
        total_count:
          type: integer
        resultType:
          type: string
    id:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-oapi-codegen-extra-tags:
        db: id
      x-go-name: ID
    text:
      type: string
    map_object:
      type: object
      additionalProperties:
        type: string
    time:
      type: string
      format: date-time
    capability:
      properties:
        provider_type:
          $ref: '#/components/schemas/provider'
          description: Provider type
        package_version:
          $ref: '#/components/schemas/text'
          description: Package version
        package_url:
          $ref: '#/components/schemas/text'
          description: Package url
        provider_name:
          $ref: '#/components/schemas/text'
          description: Provider name
        provider_description:
          type: array
          items:
            $ref: '#/components/schemas/text'
        extensions:
          $ref: '#/components/schemas/capabilityExtension'
        capabilities:
          $ref: '#/components/schemas/capabilityGeneralCapability'
        restrictedAccess:
          $ref: '#/components/schemas/restrictedAccess'
    capabilityNavigatorExtension:
      properties:
        title:
          $ref: '#/components/schemas/text'
          description: Title
        on_click_callback:
          type: integer
        href:
          properties:
            uri:
              type: string
              format: uri
            external:
              type: boolean
        component:
          $ref: '#/components/schemas/text'
          description: Component
        icon:
          $ref: '#/components/schemas/text'
          description: Icon link
        link:
          $ref: '#/components/schemas/text'
          description: link
          format: uri
        show:
          type: boolean
          description: Controls whether to show the extension or not
        type:
          $ref: '#/components/schemas/text'
          description: Extension type
        allowedTo:
          type: object
    capabilityUserPrefExtension:
      properties:
        component:
          $ref: '#/components/schemas/text'
          description: Component
        type:
          $ref: '#/components/schemas/text'
          description: Extension type
    capabilityGraphQLExtension:
      properties:
        component:
          $ref: '#/components/schemas/text'
          description: Component
        path:
          $ref: '#/components/schemas/text'
          description: Path
        type:
          $ref: '#/components/schemas/text'
          description: Extension type
    capabilitiesAccountExtension:
      properties:
        title:
          $ref: '#/components/schemas/text'
          description: Title
        on_click_callback:
          type: integer
        href:
          properties:
            uri:
              type: string
              format: uri
            external:
              type: boolean
        component:
          $ref: '#/components/schemas/text'
          description: Component
        link:
          $ref: '#/components/schemas/text'
          description: link
          format: uri
        show:
          type: boolean
          description: Controls whether to show the extension or not
        type:
          $ref: '#/components/schemas/text'
          description: Extension type
    restrictedAccess:
      properties:
        isMesheryUIRestricted:
          type: boolean
        allowedComponents:
          properties:
            navigator:
              type: object
            header:
              type: object
    capabilityGeneralCapability:
      properties:
        feature:
          $ref: '#/components/schemas/text'
          description: Feature name
        endpoint:
          $ref: '#/components/schemas/text'
    capabilityExtension:
      properties:
        navigator:
          type: array
          items:
            $ref: '#/components/schemas/capabilityNavigatorExtension'
        user_prefs:
          type: array
          items:
            $ref: '#/components/schemas/capabilityUserPrefExtension'
        graphql:
          type: array
          items:
            $ref: '#/components/schemas/capabilityGraphQLExtension'
        account:
          type: array
          items:
            $ref: '#/components/schemas/capabilitiesAccountExtension'
    provider:
      type: string
      description: One of (meshery-cloud, github, google)
    catalogRequest:
      properties:
        id:
          $ref: '#/components/schemas/id'
        content_id:
          $ref: '#/components/schemas/id'
        content_name:
          $ref: '#/components/schemas/text'
        content_type:
          enum:
            - pattern
            - filter
          description: Catalog type (pattern / filter)
        first_name:
          $ref: '#/components/schemas/text'
          description: First Name
        last_name:
          $ref: '#/components/schemas/text'
          description: Last Name
        email:
          $ref: '#/components/schemas/email'
        status:
          enum:
            - pending
            - approved
            - denied
          description: Catalog request status (pending / approved / denied)
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
    catalogRequestsPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            signup_data:
              type: array
              items:
                $ref: '#/components/schemas/catalogRequest'
    email:
      type: string
      format: email
      description: email
    mesheryPattern:
      properties:
        id:
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/id'
        pattern_file:
          $ref: '#/components/schemas/text'
          description: Pattern file
        name:
          $ref: '#/components/schemas/text'
          description: Pattern Name
        location:
          $ref: '#/components/schemas/map_object'
        visibility:
          $ref: '#/components/schemas/text'
        catalog_data:
          $ref: '#/components/schemas/map_object'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
    mesheryFilter:
      properties:
        id:
          $ref: '#/components/schemas/id'
          description: Connection id
        user_id:
          $ref: '#/components/schemas/id'
        filter_file:
          type: string
          format: byte
          description: Filter file
        name:
          $ref: '#/components/schemas/text'
          description: Filter Name
        location:
          $ref: '#/components/schemas/map_object'
        visibility:
          $ref: '#/components/schemas/text'
        catalog_data:
          $ref: '#/components/schemas/map_object'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
    mesheryInstance:
      properties:
        id:
          $ref: '#/components/schemas/id'
          description: Connection id
        name:
          $ref: '#/components/schemas/text'
          description: Connection name
        server_id:
          $ref: '#/components/schemas/text'
          description: Connected server id
        server_version:
          $ref: '#/components/schemas/text'
          description: Running server version
        server_location:
          $ref: '#/components/schemas/text'
        server_build_sha:
          $ref: '#/components/schemas/text'
          description: Server build SHA
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/time'
        status:
          $ref: '#/components/schemas/text'
          description: Status
    connection:
      properties:
        id:
          $ref: '#/components/schemas/id'
          description: ID
        name:
          $ref: '#/components/schemas/text'
          description: Connection Name
        credential_id:
          $ref: '#/components/schemas/id'
          description: Credential ID
        type:
          $ref: '#/components/schemas/text'
          description: Connection Type
        sub_type:
          $ref: '#/components/schemas/text'
          description: Connection Subtype
        kind:
          $ref: '#/components/schemas/text'
          description: Connection Kind
        metadata:
          $ref: '#/components/schemas/map_object'
        status:
          $ref: '#/components/schemas/text'
          description: Connection Status
        user_id:
          $ref: '#/components/schemas/id'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/time'
    connectionPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            connections:
              type: array
              items:
                $ref: '#/components/schemas/connection'
    connectionStatusInfo:
      properties:
        status:
          $ref: '#/components/schemas/text'
          description: Connection status
        count:
          type: integer
          description: Number of connections having the status
    connectionsStatusPage:
      properties:
        connections_status:
          type: array
          items:
            $ref: '#/components/schemas/connectionStatusInfo'
    k8sContext:
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/text'
        auth:
          $ref: '#/components/schemas/map_object'
        cluster:
          $ref: '#/components/schemas/map_object'
        server:
          type: string
        owner:
          $ref: '#/components/schemas/id'
        created_by:
          $ref: '#/components/schemas/id'
        meshery_instance_id:
          $ref: '#/components/schemas/id'
        kubernetes_server_id:
          $ref: '#/components/schemas/id'
        deployment_type:
          type: string
        updated_at:
          $ref: '#/components/schemas/time'
        created_at:
          $ref: '#/components/schemas/time'
    k8sContextPersistResponse:
      properties:
        k8sContext:
          $ref: '#/components/schemas/k8sContext'
        inserted:
          type: boolean
    credential:
      properties:
        id:
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/text'
        type:
          type: string
        secret:
          $ref: '#/components/schemas/map_object'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        deleted_at:
          $ref: '#/components/schemas/deleted_at'
    credentialsPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            credential:
              type: array
              items:
                $ref: '#/components/schemas/credential'
    created_at:
      description: Timestamp when the resource was created.
      x-go-type: time.Time
      type: string
      format: date-time
      x-oapi-codegen-extra-tags:
        db: created_at
    updated_at:
      description: Timestamp when the resource was updated.
      x-go-type: time.Time
      type: string
      format: date-time
      x-oapi-codegen-extra-tags:
        db: updated_at
    deleted_at:
      description: Timestamp when the resource was deleted.
      x-go-type: time.Time
      type: string
      format: date-time
      x-oapi-codegen-extra-tags:
        db: deleted_at
    eventType:
      type: string
      x-oapi-codegen-extra-tags:
        db: event_type
    event:
      description: Defines model for event_trackers
      properties:
        id:
          description: |
            UUID of the event.
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/user_uuid'
          description: >
            UUID of the user that initiated the event. In most cases this would
            be present, but not always.
        system_id:
          description: >
            The system from which the request is sourced. In the case of Meshery
            Server, 

            the ID is meshery_instance_id of Meshery Server (which can be found
            in the metadata of`Connections` table).
          $ref: '#/components/schemas/system_id'
        operation_id:
          description: >
            Each Event will have a OperationID. This field is never NULL, which
            is to say an operation can result in series of events, for eg:
            Different stages of Pattern Engine / activities of Workflow engine.
            Each operation (and sub-operation) will have a different operation
            ID.  
          $ref: '#/components/schemas/operation_id'
        category:
          description: |
            Resource name on which the operation is invoked.
          type: string
          example: pattern
          x-oapi-codegen-extra-tags:
            db: category
        action:
          description: |
            Action taken on the resource.
          type: string
          example: deployed
          x-oapi-codegen-extra-tags:
            db: action
        status:
          description: |
            Status for the event. 
          type: string
          enum:
            - read
            - unread
          x-oapi-codegen-extra-tags:
            db: status
        acted_upon:
          type: string
          format: uuid
          description: |
            UUID of the entity on which the event was performed.
          example: 110020-123230-434231-000213
          x-go-type: uuid.UUID
          x-oapi-codegen-extra-tags:
            db: acted_upon
        description:
          description: |
            A summary/receipt of event that occured.
          type: string
          example: “Prometheus” pattern deployed in K8s ctx “Meshery Cloud”.
          x-oapi-codegen-extra-tags:
            db: description
        severity:
          description: |
            A set of seven standard event levels.
          type: string
          enum:
            - emergency
            - critical
            - alert
            - error
            - warning
            - debug
            - informational
            - success
          example: info
          x-oapi-codegen-extra-tags:
            db: severity
        metadata:
          description: |
            Contains meaningful information, specific to the type of event.
            Structure of metadata can be different for different events.
          type: object
          x-go-type: '[]byte'
          x-oapi-codegen-extra-tags:
            db: metadata
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        deleted_at:
          $ref: '#/components/schemas/deleted_at'
      required:
        - id
        - system_id
        - operation_id
        - category
        - action
        - status
        - acted_upon
        - description
        - severity
        - metadata
        - created_at
        - updated_at
    events_filter:
      type: object
      properties:
        provider:
          type: array
          items:
            type: string
        category:
          type: array
          items:
            type: string
        action:
          type: array
          items:
            type: string
        severity:
          type: array
          items:
            type: string
        limit:
          type: integer
        offset:
          type: integer
        sort_on:
          type: string
          description: Field on which records are sorted
        order:
          type: string
          description: order of sort asc/desc, default is asc
      required:
        - provider
        - category
        - action
        - severity
        - limit
        - offset
        - sort_on
        - order
    eventTrackerGrouped:
      properties:
        count:
          type: integer
        event_type:
          $ref: '#/components/schemas/text'
        dt:
          $ref: '#/components/schemas/time'
        week:
          $ref: '#/components/schemas/text'
        month:
          $ref: '#/components/schemas/text'
        year:
          $ref: '#/components/schemas/text'
    eventTrackerGroupedArray:
      type: array
      items:
        $ref: '#/components/schemas/eventTrackerGrouped'
    eventResult:
      properties:
        event:
          $ref: '#/components/schemas/event'
        events_count:
          type: integer
          x-oapi-codegen-extra-tags:
            db: events_count
      required:
        - event
        - events_count
    eventsPage:
      allOf:
        - $ref: '#/components/schemas/recordsPage'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/eventResult'
    eventSummary:
      properties:
        user_id:
          type: string
          description: user's email or username
        provider:
          type: string
        email:
          type: string
        first_name:
          type: string
          description: First Name
        last_name:
          type: string
          description: Last Name
        activity_count:
          type: integer
        login_count:
          type: integer
        signup_count:
          type: integer
        perf_results_count:
          type: integer
        smi_results_count:
          type: integer
        meshery_apps_count:
          type: integer
        meshery_patterns_count:
          type: integer
        meshery_filters_count:
          type: integer
        last_login_time:
          type: string
          format: data-time
          x-go-type: time.Time
      required:
        - user_id
        - provider
        - email
        - first_name
        - last_name
        - activity_count
        - login_count
        - signup_count
        - perf_results_count
        - smi_results_count
        - meshery_apps_count
        - meshery_patterns_count
        - meshery_filters_count
        - last_login_time
    eventSummaryPage:
      allOf:
        - $ref: '#/components/schemas/recordsPage'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/eventSummary'
    eventsAggregate:
      properties:
        audit:
          type: integer
          description: Number of audit events
        summary:
          type: integer
          description: Number of summary events
    recordsPage:
      discriminator:
        propertyName: recordType
      properties:
        page:
          type: integer
        page_size:
          type: integer
        records_total:
          type: integer
        recordType:
          type: string
    user_uuid:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-oapi-codegen-extra-tags:
        db: user_id
      x-go-name: UserID
    system_id:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-oapi-codegen-extra-tags:
        db: system_id
      x-go-name: SystemID
    operation_id:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-oapi-codegen-extra-tags:
        db: operation_id
      x-go-name: OperationID
    mesheryFilterPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            filters:
              type: array
              items:
                $ref: '#/components/schemas/mesheryFilter'
    meshmodelModel:
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/text'
        version:
          $ref: '#/components/schemas/text'
        display_name:
          $ref: '#/components/schemas/text'
        category_id:
          $ref: '#/components/schemas/id'
        metadata:
          $ref: '#/components/schemas/map_object'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        deleted_at:
          $ref: '#/components/schemas/deleted_at'
    meshmodelCategory:
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/text'
        metadata:
          $ref: '#/components/schemas/map_object'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        deleted_at:
          $ref: '#/components/schemas/deleted_at'
    meshmodelCategoriesPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/meshmodelCategory'
    meshmodelModelsPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            models:
              type: array
              items:
                $ref: '#/components/schemas/meshmodelModel'
    mesheryPatternResource:
      properties:
        id:
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/text'
          description: Name
        namepace:
          $ref: '#/components/schemas/text'
          description: Namespace
        type:
          $ref: '#/components/schemas/text'
          description: Type
        oam_type:
          $ref: '#/components/schemas/text'
          description: OAM type
        deleted:
          type: boolean
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
    mesheryPatternResourcePage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/mesheryPatternResource'
    mesheryPatternPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            patterns:
              type: array
              items:
                $ref: '#/components/schemas/mesheryPattern'
    deletePatternModel:
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          description: Pattern name
          $ref: '#/components/schemas/text'
    emails:
      type: array
      items:
        $ref: '#/components/schemas/email'
    performanceProfile:
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/text'
        user_id:
          $ref: '#/components/schemas/id'
        schedule:
          $ref: '#/components/schemas/id'
        load_generators:
          type: string
        endpoints:
          type: string
        service_mesh:
          type: string
        concurrent_request:
          type: integer
        qps:
          type: integer
        duration:
          type: string
        last_run:
          $ref: '#/components/schemas/time'
        total_results:
          type: integer
        request_headers:
          type: string
        request_cookies:
          type: string
        request_body:
          type: string
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
    performanceProfilePage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/performanceProfile'
    performanceResult:
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/text'
        test_start_time:
          $ref: '#/components/schemas/time'
        mesh:
          type: string
        runner_results:
          $ref: '#/components/schemas/map_object'
        deleted:
          type: boolean
        server_metrics:
          $ref: '#/components/schemas/map_object'
        server_board_config:
          $ref: '#/components/schemas/map_object'
        performance_profile:
          $ref: '#/components/schemas/id'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
    mesheryResultPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/performanceResult'
    tokenPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            tokens:
              type: array
              items:
                $ref: '#/components/schemas/userToken'
    userToken:
      properties:
        id:
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/id'
        provider:
          $ref: '#/components/schemas/provider'
        access_token:
          $ref: '#/components/schemas/text'
        refresh_token:
          $ref: '#/components/schemas/text'
        name:
          $ref: '#/components/schemas/text'
        purpose:
          $ref: '#/components/schemas/text'
        is_oauth:
          type: boolean
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
    signupData:
      properties:
        id:
          $ref: '#/components/schemas/id'
        first_name:
          $ref: '#/components/schemas/text'
          description: First Name
        last_name:
          $ref: '#/components/schemas/text'
          description: Last Name
        email:
          $ref: '#/components/schemas/email'
        occupation:
          $ref: '#/components/schemas/text'
          description: Occupation
        organization:
          $ref: '#/components/schemas/text'
          description: Organization
        role:
          $ref: '#/components/schemas/text'
          description: Role in organization
        form_type:
          $ref: '#/components/schemas/text'
          description: Form Type (MeshMap or Playground)
        status:
          $ref: '#/components/schemas/text'
          description: Status (approved / denied)
        task_id:
          $ref: '#/components/schemas/text'
          description: ClickUp task id
        task_link:
          $ref: '#/components/schemas/text'
          description: ClickUp task link
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
    signupRequestsPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            signup_data:
              type: array
              items:
                $ref: '#/components/schemas/signupData'
    bulkDelete:
      type: object
      properties:
        user_ids:
          $ref: '#/components/schemas/id'
        user_emails:
          $ref: '#/components/schemas/emails'
      required:
        - user_ids
        - user_emails
    user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/user_id'
        provider:
          $ref: '#/components/schemas/provider'
        email:
          $ref: '#/components/schemas/email'
        first_name:
          $ref: '#/components/schemas/text'
          description: First Name
        last_name:
          $ref: '#/components/schemas/text'
          description: Last Name
        avatar_url:
          $ref: '#/components/schemas/avatar_url'
        status:
          $ref: '#/components/schemas/status'
        bio:
          $ref: '#/components/schemas/bio'
        preferences:
          $ref: '#/components/schemas/map_object'
        accepted_terms_at:
          $ref: '#/components/schemas/accepted_terms_at'
        first_login_time:
          $ref: '#/components/schemas/time'
        last_login_time:
          $ref: '#/components/schemas/time'
      required:
        - id
        - user_id
        - provider
        - email
        - first_name
        - last_name
        - status
        - created_at
        - updated_at
        - last_login_time
        - deleted_at
    recentUsers:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        first_name:
          $ref: '#/components/schemas/text'
          description: First Name
        last_name:
          $ref: '#/components/schemas/text'
          description: Last Name
        avatar_url:
          $ref: '#/components/schemas/avatar_url'
    rolesPage:
      allOf:
        - $ref: '#/components/schemas/recordsPage'
        - type: string
    key:
      properties:
        ID:
          $ref: '#/components/schemas/id'
        subcategory:
          $ref: '#/components/schemas/text'
        function:
          $ref: '#/components/schemas/text'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/nullTime'
        category:
          $ref: '#/components/schemas/text'
        description:
          $ref: '#/components/schemas/text'
        owner:
          $ref: '#/components/schemas/id'
    userKeys:
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/key'
        total_count:
          type: integer
    deleteOn:
      type: string
      enum:
        - self
        - bulk
    usersPageForAdmin:
      allOf:
        - $ref: '#/components/schemas/recordsPage'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/usersWithRolesForAdmin'
    usersWithRolesForAdmin:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/user_id'
        username:
          $ref: '#/components/schemas/username'
        email:
          $ref: '#/components/schemas/email'
        first_name:
          $ref: '#/components/schemas/text'
          description: First Name
        last_name:
          $ref: '#/components/schemas/text'
          description: Last Name
        status:
          $ref: '#/components/schemas/status'
        role_names:
          $ref: '#/components/schemas/roleNames'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        last_login_time:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/time'
        prefs:
          $ref: '#/components/schemas/email_preference'
        avatar_url:
          $ref: '#/components/schemas/avatar_url'
        preferences:
          $ref: '#/components/schemas/map_object'
      required:
        - id
        - user_id
        - username
        - email
        - first_name
        - last_name
        - status
        - role_names
        - created_at
        - updated_at
        - last_login_time
        - deleted_at
    teamMembers:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/user_id'
        username:
          $ref: '#/components/schemas/username'
        email:
          $ref: '#/components/schemas/email'
        first_name:
          $ref: '#/components/schemas/text'
          description: First Name
        last_name:
          $ref: '#/components/schemas/text'
          description: Last Name
        status:
          $ref: '#/components/schemas/status'
        role_names:
          $ref: '#/components/schemas/roleNames'
        joined_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        last_login_time:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/time'
        prefs:
          $ref: '#/components/schemas/email_preference'
        avatar_url:
          $ref: '#/components/schemas/avatar_url'
      required:
        - id
        - user_id
        - username
        - email
        - first_name
        - last_name
        - status
        - role_names
        - joined_at
        - updated_at
        - last_login_time
        - deleted_at
    teamMembersPage:
      allOf:
        - $ref: '#/components/schemas/recordsPage'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/teamMembers'
    usersForNonAdmin:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/user_id'
        username:
          $ref: '#/components/schemas/username'
        email:
          $ref: '#/components/schemas/email'
        first_name:
          $ref: '#/components/schemas/text'
          description: First Name
        last_name:
          $ref: '#/components/schemas/text'
          description: Last Name
        prefs:
          $ref: '#/components/schemas/email_preference'
        avatar_url:
          $ref: '#/components/schemas/avatar_url'
        preferences:
          $ref: '#/components/schemas/map_object'
      required:
        - id
        - user_id
        - username
        - email
        - first_name
        - last_name
    usersPageForNonAdmin:
      allOf:
        - $ref: '#/components/schemas/recordsPage'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/usersForNonAdmin'
    recentActivityPage:
      properties:
        recent_activity:
          type: array
          items:
            $ref: '#/components/schemas/event'
    accountOverview:
      properties:
        k8s_count:
          type: integer
        app_count:
          type: integer
        pattern_count:
          type: integer
    badge:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/text'
        description:
          $ref: '#/components/schemas/text'
        label:
          $ref: '#/components/schemas/text'
        svg_location:
          $ref: '#/components/schemas/text'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/nullTime'
    badges:
      properties:
        badges:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/badge'
        total_count:
          type: integer
    nullTime:
      description: SQL null Timestamp to handle null values of time.
      x-go-type: sql.NullTime
      x-go-type-import: database/sql
      type: string
    user_id:
      type: string
      description: user's email or username
    avatar_url:
      type: string
      description: Link for profile picture
    status:
      type: string
    bio:
      type: string
    accepted_terms_at:
      type: string
    empty:
      description: Body for empty request
      type: object
      properties: {}
    username:
      type: string
    roleNames:
      type: array
      items:
        type: string
    email_preference:
      type: object
      properties:
        welcome_email:
          type: boolean
        notify_role_change:
          type: boolean
  requestBodies:
    mesheryApplicationRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              url:
                $ref: '#/components/schemas/text'
              path:
                $ref: '#/components/schemas/text'
              save:
                type: boolean
              application_data:
                $ref: '#/components/schemas/mesheryApplication'
              source_type:
                $ref: '#/components/schemas/text'
    mesheryCatalogRequest:
      description: Body for publishing catalog
      required: true
      content:
        application/json:
          schema:
            properties:
              id:
                $ref: '#/components/schemas/id'
              catalog_type:
                enum:
                  - pattern
                  - filter
                description: Catalog type (pattern / filter)
              catalog_data:
                $ref: '#/components/schemas/map_object'
    connectionPayload:
      content:
        application/json:
          schema:
            type: object
            properties:
              kind:
                $ref: '#/components/schemas/text'
                description: Kind
              type:
                $ref: '#/components/schemas/text'
                description: Connection type
              sub_type:
                $ref: '#/components/schemas/text'
                description: Connection subtype
              credential_secret:
                $ref: '#/components/schemas/map_object'
              metadata:
                $ref: '#/components/schemas/map_object'
    credentialBody:
      description: Body for user credential
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/credential'
    mesheryFilterRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              url:
                $ref: '#/components/schemas/text'
              path:
                $ref: '#/components/schemas/text'
              save:
                type: boolean
              filter_data:
                $ref: '#/components/schemas/mesheryFilter'
    mesheryPatternResource:
      description: Body for upserting meshery pattern resource
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/mesheryPatternResource'
    mesheryPatternRequestBody:
      description: Body for upserting meshery pattern
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              url:
                $ref: '#/components/schemas/text'
              path:
                $ref: '#/components/schemas/text'
              save:
                type: boolean
              pattern_data:
                $ref: '#/components/schemas/mesheryPattern'
    mesheryPatternDeleteRequestBody:
      description: Body for deleting meshery pattern
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              patterns:
                type: array
                items:
                  $ref: '#/components/schemas/deletePatternModel'
    designShare:
      description: Body for sharing design
      required: true
      content:
        application/json:
          schema:
            properties:
              emails:
                $ref: '#/components/schemas/emails'
              id:
                $ref: '#/components/schemas/id'
              content_type:
                type: string
              share:
                type: boolean
            required:
              - emails
              - id
              - content_type
              - share
    signupData:
      description: Body for updating user signup request
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/signupData'
    userInvite:
      description: Body for user invite request
      required: true
      content:
        application/json:
          schema:
            properties:
              first_name:
                $ref: '#/components/schemas/text'
                description: First Name
              last_name:
                $ref: '#/components/schemas/text'
                description: Last Name
              email:
                $ref: '#/components/schemas/email'
            required:
              - first_name
              - last_name
              - email
    deleteUsers:
      description: Body for delete of user accounts
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/bulkDelete'
              - $ref: '#/components/schemas/empty'
    user:
      description: Body for upserting user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
  parameters:
    page:
      name: page
      in: query
      description: Get reponses by page
      schema:
        type: string
    page_size:
      name: page_size
      in: query
      description: Get reponses by pageSize
      schema:
        type: string
    search:
      name: search
      in: query
      description: Get responses that match search param value
      schema:
        type: string
    order:
      name: order
      in: query
      description: Get ordered responses
      schema:
        type: string
    id:
      name: id
      in: path
      description: Unique identifier
      schema:
        type: string
      required: true
    os:
      name: os
      in: query
      description: user's os
      schema:
        type: string
    playground:
      name: playground
      in: query
      description: Is playground mode
      schema:
        type: string
    mesheryVersion:
      name: meshery-version
      in: path
      description: meshery version
      schema:
        type: string
      required: true
    catalogContentType:
      in: path
      required: true
      name: type
      description: Catalog content type
      schema:
        type: string
        enum:
          - pattern
          - filter
    requestFilter:
      name: filter
      in: query
      description: Filter for catalog requests
      schema:
        properties:
          id:
            $ref: '#/components/schemas/id'
          status:
            type: array
            items:
              type: string
    connectionKind:
      name: connectionKind
      in: path
      description: 'Connection kind (eg: Meshery)'
      required: true
      schema:
        $ref: '#/components/schemas/text'
    connectionId:
      name: connectionId
      in: path
      description: Connection ID
      schema:
        $ref: '#/components/schemas/id'
      required: true
    serverId:
      name: mesheryServerID
      in: path
      description: Meshery server ID
      schema:
        $ref: '#/components/schemas/id'
      required: true
    credentialId:
      name: credential_id
      in: query
      description: credential Id
      schema:
        type: string
      required: true
    cumulative:
      name: cumulative
      in: query
      description: Cumulative events
      schema:
        type: string
    eventsFilter:
      name: filter
      in: query
      description: Filter for retrieving events
      schema:
        type: object
        properties:
          provider:
            type: array
            items:
              type: string
          event_type:
            type: array
            items:
              type: string
    namespace:
      name: namespace
      in: query
      description: Namespace
      schema:
        type: string
    type:
      name: type
      in: query
      description: Type
      schema:
        type: string
    oamType:
      name: oamType
      in: query
      description: OAM type
      schema:
        type: string
    name:
      name: name
      in: query
      description: Name of the resource
      schema:
        type: string
    resultId:
      name: result_id
      in: path
      description: Result id
      schema:
        $ref: '#/components/schemas/id'
      required: true
    resultID:
      name: resultID
      in: path
      description: Performance Result Id
      schema:
        type: string
      required: true
    isOAuth:
      name: isOAuth
      in: query
      description: To get OAuth tokens as well
      schema:
        type: string
    purpose:
      name: purpose
      in: query
      description: Purpose for which token is generated
      schema:
        type: string
    userId:
      name: user_id
      in: path
      description: User's user_id
      schema:
        type: string
      required: true
    provider:
      name: provider
      in: query
      description: Remote provider
      schema:
        type: string
      required: true
    deleteOn:
      in: path
      required: true
      name: delete_on
      description: Defines on whom the delete operation is to be performed
      schema:
        $ref: '#/components/schemas/deleteOn'
    filter:
      name: filter
      in: query
      description: Get filtered reponses
      schema:
        type: string
  responses:
    '200':
      description: ok
      content:
        text/plain:
          schema:
            type: string
    '201':
      description: created
      content:
        text/plain:
          schema:
            type: string
    '400':
      description: Invalid request body or request param
      content:
        text/plain:
          schema:
            type: string
    '401':
      description: Expired JWT token used or insufficient privilege
      content:
        text/plain:
          schema:
            type: string
    '404':
      description: Result not found
      content:
        text/plain:
          schema:
            type: string
    '409':
      description: Publish request already exists
      content:
        text/plain:
          schema:
            type: string
    '500':
      description: Internal server error
      content:
        text/plain:
          schema:
            type: string

openapi: 3.0.0
info:
  title: Meshery Cloud
  description: Documentation for meshery Cloud REST APIs
  contact:
    email: support@layer5.io
  version: v0.6.394
servers:
  - url: https://meshery.layer5.io
    description: Meshery Cloud production server URL
  - url: https://staging-meshery.layer5.io
    description: Meshery Cloud staging server URL
  - url: http://localhost:9876
    description: Meshery Cloud development server URL (controlled via PORT environment variable)
security:
  - jwt: []
tags:
  - name: integrations
    description:   APIs for integrations

components:
  schemas:
    ConnectionRegistrationProcess:
      type: string
      enum:
        - pre_registration
        - post_registration
        - registration

    ConnectionType:
      type: string
      enum:
        - platform
        - telemetry
        - collaboration

    ConnectionKind:
      type: string
      enum:
        - meshery
        - grafana
        - prometheus
        - gke
        - aws
        - azure
        - slack
        - github
        - kubernetes

    ConnectionAction:
      type: string
      enum:
        - registered
        - deleted
        - updated

    ConnectionSubType:
      type: string
      enum:
        - cloud
        - identity
        - metrics
        - chat
        - git
        - orchestration

    ConnectionStatus:
      type: string
      description: Connection Status
      x-go-type-skip-optional-pointer: true
      x-oapi-codegen-extra-tags:
        db: status
        json: status
      enum:
        - discovered
        - registered
        - connected
        - ignored
        - maintenance
        - disconnected
        - deleted
        - not_found

    connection:
      properties:
        ID:
          $ref: './common/core.yml#/components/schemas/general_id'
          description: ID
        name:
          type: string
          x-oapi-codegen-extra-tags:
            db: name
            json: name
          description: Connection Name
          x-go-type-skip-optional-pointer: true
        credential_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import: 
            path: github.com/gofrs/uuid
          x-oapi-codegen-extra-tags:
            db: credential_id
            json: credential_id
          x-go-name: CredentialID
        type:
          type: string
          x-oapi-codegen-extra-tags:
            db: type
            json: type
          description: Connection Type
          x-go-type-skip-optional-pointer: true
        sub_type:
          type: string
          x-oapi-codegen-extra-tags:
            db: sub_type
            json: sub_type
          description: Connection Subtype
          x-go-type-skip-optional-pointer: true
        kind:
          type: string
          x-oapi-codegen-extra-tags:
            db: kind
            json: kind
          description: Connection Kind
          x-go-type-skip-optional-pointer: true
        metadata:
          type: object
          additionalProperties:
          x-go-type-skip-optional-pointer: true
          format: slices.Map
          x-go-type: slices.Map
          x-go-type-import: 
            path: github.com/gobuffalo/pop/slices
          x-oapi-codegen-extra-tags:
            db: metadata
            json: metadata
        status: 
          $ref: '#/components/schemas/ConnectionStatus'
        user_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import: 
            path: github.com/gofrs/uuid
          x-oapi-codegen-extra-tags:
            db: user_id
            json: user_id
          x-go-name: UserID
        created_at:
          x-go-type: time.Time
          type: string
          format: date-time
          x-go-name: CreatedAt
          x-oapi-codegen-extra-tags:
            db: created_at
            yaml: created_at
          x-go-type-skip-optional-pointer: true
        updated_at:
          x-go-type: time.Time
          type: string
          format: date-time
          x-go-name: UpdatedAt
          x-oapi-codegen-extra-tags:
            db: updated_at
            yaml: updated_at
          x-go-type-skip-optional-pointer: true
        deleted_at:
          description: SQL null Timestamp to handle null values of time.
          x-go-type: sql.NullTime
          type: string
          x-go-type-skip-optional-pointer: true
          x-oapi-codegen-extra-tags:
            db: deleted_at
            json: deleted_at
        environments:
          x-go-type-skip-optional-pointer: true
          type: array
          x-oapi-codegen-extra-tags:
            db: '-'
            json: environments
          items:
            $ref: './environment.yml#/components/schemas/environment'

    mesheryInstance:
      properties:
        id:
          type: string
          x-go-type-skip-optional-pointer: true
          x-go-name: ID
          description: Connection id
        name:
          $ref: ./common/core.yml#/components/schemas/text
          description: Connection name
        server_id:
          type: string
          x-go-type-skip-optional-pointer: true
          description: Connected server id
          x-go-name: ServerID
        server_version:
          $ref: ./common/core.yml#/components/schemas/text
          description: Running server version
        server_location:
          $ref: ./common/core.yml#/components/schemas/endpoint
        server_build_sha:
          $ref: ./common/core.yml#/components/schemas/text
          description: Server build SHA
        created_at:
          $ref: ./common/core.yml#/components/schemas/time
        updated_at:
          $ref: ./common/core.yml#/components/schemas/time
        deleted_at:
          $ref: ./common/core.yml#/components/schemas/nullTime
    
    connectionPage:
      properties:
        page:
          $ref: ./common/core.yml#/components/schemas/number_nullable
        page_size:
          $ref: ./common/core.yml#/components/schemas/number_nullable
        total_count:
          $ref: ./common/core.yml#/components/schemas/number_nullable
        connections:
          x-go-type-skip-optional-pointer: true
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/connection"

    mesheryInstancePage:
      properties:
        page:
          $ref: ./common/core.yml#/components/schemas/number
        page_size:
          $ref: ./common/core.yml#/components/schemas/number
        total_count:
          $ref: ./common/core.yml#/components/schemas/number
        mesheryInstances:
          x-go-type-skip-optional-pointer: true
          type: array
          items:
            $ref: "#/components/schemas/mesheryInstance"

    connectionStatusInfo:
      properties:
        status:
          $ref: ./common/core.yml#/components/schemas/text
          description: Connection status
        count:
          type: integer
          description: Number of connections having the status
          x-go-type-skip-optional-pointer: true

    connectionsStatusPage:
      properties:
        page:
          $ref: ./common/core.yml#/components/schemas/number
        page_size:
          $ref: ./common/core.yml#/components/schemas/number
        total_count:
          $ref: ./common/core.yml#/components/schemas/number
        connections_status:
          x-go-type-skip-optional-pointer: true
          type: array
          items:
            $ref: "#/components/schemas/connectionStatusInfo"

    # Ideally inside connection Definiton in kubernetes model.
    # Default connection state to be captured in connection definition.
    # Capture transitions in
    k8sContext:
      properties:
        id:
          $ref: ./common/core.yml#/components/schemas/general_id
        name:
          $ref: ./common/core.yml#/components/schemas/text
        auth:
          $ref: ./common/core.yml#/components/schemas/slice_object
        cluster:
          $ref: ./common/core.yml#/components/schemas/slice_object
        server:
          type: string
        owner:
          $ref: ./common/core.yml#/components/schemas/id
        created_by:
          $ref: ./common/core.yml#/components/schemas/id
        meshery_instance_id:
          $ref: ./common/core.yml#/components/schemas/id
        kubernetes_server_id:
          $ref: ./common/core.yml#/components/schemas/id
        deployment_type:
          type: string
        updated_at:
          $ref: ./common/core.yml#/components/schemas/time
        created_at:
          $ref: ./common/core.yml#/components/schemas/time
    k8sContextPersistResponse:
      properties:
        k8sContext:
          $ref: "#/components/schemas/k8sContext"
        inserted:
          type: boolean

  requestBodies:
    connectionPayload:
      content:
        application/json:
          schema:
            type: object
            properties:
              kind:
                $ref: ./common/core.yml#/components/schemas/text
                description: Kind
              connection_id:
                type: string
                format: uuid
                x-go-type: uuid.UUID
                x-go-type-import: 
                  path: github.com/gofrs/uuid
                x-go-name: ConnectionID
                x-oapi-codegen-extra-tags:
                  json: id
                x-go-type-skip-optional-pointer: true
              type:
                $ref: ./common/core.yml#/components/schemas/text
                description: Connection type
              name:
                $ref: ./common/core.yml#/components/schemas/text
                description: Connection name
              status:
                $ref: ./common/core.yml#/components/schemas/text
                description: Connection status
              sub_type:
                $ref: ./common/core.yml#/components/schemas/text
                description: Connection subtype
              credential_secret:
                $ref: ./common/core.yml#/components/schemas/slice_object
              metadata:
                $ref: ./common/core.yml#/components/schemas/slice_object
              credential_id:
                type: string
                format: uuid
                x-go-type: uuid.UUID
                x-go-type-import: 
                  path: github.com/gofrs/uuid
                x-go-name: CredentialID
                x-go-type-skip-optional-pointer: false

  securitySchemes:
    jwt:
      type: http
      scheme: Bearer
      bearerFormat: JWT
  # any special parameters for this tag
  parameters:
    connectionId:
      name: connectionId
      in: path
      description: Connection ID
      schema:
        $ref: ./common/core.yml#/components/schemas/id
      required: true
    serverId:
      name: mesheryServerID
      in: path
      description: Meshery server ID
      schema:
        $ref: ./common/core.yml#/components/schemas/id
      required: true
# any special response for this tag
# paths:
#   /api/integrations/connections:
#     post:
#       tags:
#         - integrations
#       operationId: RegisterConnection
#       summary: Register Connection
#       description: Register with Meshery Cloud
#       requestBody:
#         $ref: "#/components/requestBodies/connectionPayload"
#       responses:
#         '200':
#           description: Paginated registered connection
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/connectionPage'
#         "401":
#           $ref: ./common/responses.yml#/401
#         "500":
#           $ref: ./common/responses.yml#/500
#     get:
#       tags:
#         - integrations
#       operationId: GetConnections
#       summary: Get connections
#       description: Get connections
#       parameters:
#         - $ref: ./common/parameters.yml#/components/parameters/page
#         - $ref: ./common/parameters.yml#/components/parameters/page_size
#         - $ref: ./common/parameters.yml#/components/parameters/search
#         - $ref: ./common/parameters.yml#/components/parameters/order
#       responses:
#         "200":
#           description: Paginated list of connections
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/connectionPage"
#         "401":
#           $ref: ./common/responses.yml#/401
#         "500":
#           $ref: ./common/responses.yml#/500
#   /api/integrations/connections/{connectionId}:
#     put:
#       tags:
#         - integrations
#       operationId: EditConnectionByID
#       summary: Edit Connection by ID
#       description: Edit registered connection using the connection ID
#       parameters:
#         - $ref: "#/components/parameters/connectionId"
#       requestBody:
#         $ref: "#/components/requestBodies/connectionPayload"
#       responses:
#         "200":
#           description: Edited connection
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/connectionPage"
#         "401":
#           $ref: ./common/responses.yml#/401
#         "500":
#           $ref: ./common/responses.yml#/500
#     delete:
#       tags:
#         - integrations
#       operationId: DeleteConnection
#       summary: Delete connection
#       description: Delete registered connection
#       parameters:
#         - $ref: '#/components/parameters/connectionId'
#       responses:
#         '200':
#           description: Deleted connection
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/connectionPage'
#         '401':
#           $ref: './common/responses.yml#/401'
#         '500':
#           $ref: './common/responses.yml#/500'
#   /api/integrations/connections/status/{connectionId}:
#     put:
#       tags:
#         - integrations
#       operationId: UpdateConnectionStatusByID
#       summary: Update Connection Status by ID
#       description: Edit connection status using the connection ID
#       parameters:
#         - $ref: '#/components/parameters/connectionId'
#       requestBody:
#         description: Body containing connection status to update.
#         required: true
#         content:
#           text/plain:
#             schema:
#               type: string
#       responses:
#         '200':
#           description: Updated connection
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/connection'
#         '500':
#           description: Event containing error details in metadata
#           content:
#             application/json:
#               schema:
#                 $ref: ./events.yml#/components/schemas/event
#   /api/integrations/connections/status:
#     get:
#       tags:
#         - integrations
#       operationId: GetConnectionStatus
#       summary: Get status of all connections
#       description: Get summary about the status of all connections
#       responses:
#         "200":
#           description: Status of connections
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/connectionsStatusPage"
#         "401":
#           $ref: ./common/responses.yml#/401
#         "500":
#           $ref: ./common/responses.yml#/500
#   /api/integrations/connections/{connectionKind}:
#     get:
#       tags:
#         - integrations
#       operationId: GetConnectionsByKind
#       summary: Get connections by kind
#       description: Get connections by kind
#       parameters:
#         - $ref: "#/components/parameters/connectionKind"
#         - $ref: ./common/parameters.yml#/components/parameters/page
#         - $ref: ./common/parameters.yml#/components/parameters/page_size
#         - $ref: ./common/parameters.yml#/components/parameters/search
#         - $ref: ./common/parameters.yml#/components/parameters/order
#       responses:
#         "200":
#           description: Connections by kind
#           content:
#             application/json:
#               schema:
#                 type: object
#         "401":
#           $ref: ./common/responses.yml#/401
#         "500":
#           $ref: ./common/responses.yml#/500
#       security: []
#     delete:
#       tags:
#         - integrations
#       operationId: DeleteConnection
#       summary: Delete connection
#       description: Delete registered connection
#       parameters:
#         - $ref: "#/components/parameters/connectionKind"
#       responses:
#         "200":
#           description: Deleted connection
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/connection"
#         "401":
#           $ref: ./common/responses.yml#/401
#         "500":
#           $ref: ./common/responses.yml#/500
#   /api/integrations/connections/{connectionKind}/{connectionId}:
#     get:
#       tags:
#         - integrations
#       operationId: GetConnectionsByKindAndConnectionID
#       summary: Get connections by kind and connectionID.
#       description: Get connections by kind (kind is required because this API returns the results in non std format of a connection)
#       parameters:
#         - $ref: "#/components/parameters/connectionKind"
#         - $ref: "#/components/parameters/connectionId"
#         - $ref: "./common/parameters.yml#/components/parameters/page"
#         - $ref: ./common/parameters.yml#/components/parameters/page_size
#         - $ref: "./common/parameters.yml#/components/parameters/search"
#         - $ref: "./common/parameters.yml#/components/parameters/order"
#       responses:
#         "200":
#           description: Connections by kind
#           content:
#             application/json:
#               schema:
#                 type: object
#                 oneOf:
#                   - $ref: "#/components/schemas/k8sContextPersistResponse"
#         "401":
#           $ref: ./common/responses.yml#/401
#         "500":
#           $ref: ./common/responses.yml#/500
#   /api/integrations/connections/meshery/{mesheryServerID}:
#     delete:
#       tags:
#         - integrations
#       operationId: DeleteMesheryConnection
#       summary: Delete Meshery connection
#       description: Deletes a given meshery connection. This is generally used for deleting connections from Meshery Server UI where UI is not aware of connection IDs.
#       parameters:
#         - $ref: "#/components/parameters/serverId"
#       responses:
#         "200":
#           description: Deleted Meshery connection
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/connectionPage'
#         "401":
#           $ref: ./common/responses.yml#/401
#         "500":
#           $ref: ./common/responses.yml#/500
